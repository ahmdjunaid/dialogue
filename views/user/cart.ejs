<!-- views/account.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dialogue Digital - Manage Account</title>
    <link rel="stylesheet" href="/css/user/cart.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .coupCOntainer {
            display: flex;
            justify-content: space-between;
            width: 100%;
            gap: 20px;
        }

        .innerCoup {
            border-left: 5px solid green;
            height: 9em;
        }
    </style>
</head>

<body>
    <%- include('../../views/partials/user/header') %>

        <div class="main-content">
            <div class="cart_container">
                <h2 class="text-center">MY CART</h2>
                <!-- Products table -->
                <table class="cart_products_table">
                    <thead>
                        <tr class="cart_header_row">
                            <th class="cart_header_cell cart_product_header">Product Details</th>
                            <th class="cart_header_cell cart_price_header">Price</th>
                            <th class="cart_header_cell cart_quantity_header">Quantity</th>
                            <th class="cart_header_cell cart_total_header">Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% let availableProducts=[] %>
                            <% let stockOut=[] %>
                                <% products.forEach(item=> {
                                    const product = item.product;
                                    const offer = item.bestOffer;
                                    let discount = 0;
                                    let finalPrice = product.price;

                                    if (offer) {
                                    if (offer.discountType === 'flat') {
                                    discount = offer.discountAmount;
                                    } else if (offer.discountType === 'percentage') {
                                    discount = (product.price * offer.discountAmount) / 100;
                                    }
                                    finalPrice = product.price - discount;
                                    }
                                    %>
                                    <tr class="cart_item_row">
                                        <td class="cart_product_cell">
                                            <div class="cart_product_wrapper">
                                                <div class="cart_remove_btn_wrapper">
                                                    <button class="cart_remove_btn">×</button>
                                                </div>
                                                <div class="cart_product_img_wrapper">
                                                    <img src="../uploads/<%= product.productId.productImage[0] %>"
                                                        alt="<%= product.name %>" class="cart_product_img">
                                                </div>
                                                <div class="cart_product_info">
                                                    <h3 class="cart_product_title">
                                                        <%= product.name %>
                                                    </h3>
                                                    <p class="cart_product_desc">
                                                        <%= product.productId.description %>
                                                    </p>

                                                    <% if (offer) { %>
                                                        <p class="cart_product_offer text-success">
                                                            <strong>
                                                                <%= offer.offerName %>
                                                            </strong><br>
                                                            <strong>Discount:</strong>
                                                            <%= offer.discountType==='flat' ? `₹${discount}` :
                                                                `${offer.discountAmount}%` %> OFF
                                                        </p>
                                                        <% } %>
                                                </div>
                                            </div>
                                        </td>

                                        <td class="cart_price_cell">
                                            <% if (offer) { %>
                                                <span class="text-muted"><s>₹<%= product.price.toLocaleString() %>
                                                            </s></span><br>
                                                <strong>₹<%= finalPrice.toLocaleString() %></strong>
                                                <% } else { %>
                                                    ₹<%= product.price.toLocaleString() %>
                                                        <% } %>
                                        </td>

                                        <td class="cart_quantity_cell">
                                            <% if (!product.productId.isDeleted && product.productId.stock !==0) { %>
                                                <% availableProducts.push(product) %>
                                                    <div class="quantity_control">
                                                        <button class="quantity_btn decrease_btn"
                                                            data-product-id="<%= product.productId._id %>">-</button>
                                                        <span class="quantity_value">
                                                            <%= product.quantity %>
                                                        </span>
                                                        <button class="quantity_btn increase_btn"
                                                            data-product-id="<%= product.productId._id %>">+</button>
                                                    </div>
                                                    <% } else { %>
                                                        <% stockOut.push(product) %>
                                                            <button class="quantity_btn decrease_btn"
                                                                style="display: none;"></button>
                                                            <span class="quantity_value">0</span>
                                                            <button class="quantity_btn increase_btn"
                                                                style="display: none;"></button>
                                                            <% } %>
                                        </td>

                                        <td class="cart_total_cell">
                                            <% if (!product.productId.isDeleted && product.productId.stock !==0) { %>
                                                ₹<%= (finalPrice * product.quantity).toLocaleString() %>
                                                    <% } else { %>
                                                        <button disabled="disabled" class="btn btn-danger">SOLD
                                                            OUT/UNLISTED</button>
                                                        <% } %>
                                        </td>
                                    </tr>
                                    <% }); %>
                    </tbody>
                    <form action="/checkout" method="post">
                        <% availableProducts.forEach(product=> { %>
                            <input type="hidden" name="products[]" value="<%= JSON.stringify(product) %>">
                            <% }) %>
                                <% stockOut.forEach(product=> { %>
                                    <input type="hidden" name="stockOut[]" value="<%= JSON.stringify(product) %>">
                                    <% }) %>
                                        <button id="submitBtn" hidden></button>
                    </form>

                </table>
                <%if(coupon){%>
                    <div class="coupCOntainer">
                        <div class="card p-3 my-3 shadow-sm border-success innerCoup">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="text-success mb-1">
                                        <%= coupon.couponName %>
                                    </h5>
                                    <p class="mb-1">Offer: ₹<%= coupon.offerAmount %>
                                    </p>
                                    <p class="mb-0 text-muted">Valid Until: <%=
                                            coupon.validUpto.toLocaleDateString('en-US', { year: 'numeric' ,
                                            month: 'short' , day: 'numeric' }) %>
                                    </p>
                                </div>
                                <input type="hidden" name="couponId" value="<%= coupon._id %>">
                                <button type="button" class="btn btn-outline-danger"
                                    onclick="cancelCoupon('<%= coupon._id %>')">Cancel Coupon</button>
                            </div>
                        </div>
                        <%}%>

                            <!-- Coupon Modal -->
                            <div id="couponModal" class="coupon-modal">
                                <div class="coupon-modal-content">
                                    <span class="close-btn" onclick="toggleCoupons()">&times;</span>
                                    <h3>Available Coupons</h3>
                                    <div id="couponContainer" class="coupon-list">
                                        <% availableCoupons.forEach(coupon=> { %>
                                            <div class="coupon-card">
                                                <p><strong>
                                                        <%= coupon.couponName %>
                                                    </strong></p>
                                                <p>
                                                    <%= coupon.description %>
                                                </p>
                                                <p>
                                                    Get ₹<%= coupon.offerAmount %> off instantly by using this coupon.
                                                </p>
                                                <div class="coupon-code">
                                                    <span>
                                                        <%= coupon.couponCode %>
                                                    </span>
                                                    <button onclick="copyCoupon('<%= coupon.couponCode %>')"
                                                        class="copy-btn">Copy</button>
                                                </div>
                                            </div>
                                            <% }) %>
                                    </div>
                                </div>
                            </div>


                            <!-- RIGHT: Cart Totals -->
                            <div class="cart_summary_wrapper"
                                style="flex: 1; background-color: #fff; padding: 20px; border-radius: 10px;">
                                <h2 class="cart_totals_heading">CART TOTALS</h2>
                                <table class="cart_totals_table">
                                    <tr class="cart_totals_row">
                                        <td class="cart_totals_label">Subtotal</td>
                                        <td class="cart_totals_value">₹<%= cartTotals.subtotal.toLocaleString() %>
                                        </td>
                                    </tr>

                                    <% if(cartTotals.offerDiscount> 0) { %>
                                        <tr class="cart_totals_row">
                                            <td class="cart_totals_label">Offer Discount</td>
                                            <td class="cart_totals_value" id="offerAmount">- ₹<%=
                                                    cartTotals.offerDiscount.toLocaleString() %>
                                            </td>
                                        </tr>
                                        <% } %>

                                            <% if(cartTotals.couponDiscount> 0) { %>
                                                <tr class="cart_totals_row">
                                                    <td class="cart_totals_label">Coupon Applied</td>
                                                    <td class="cart_totals_value">- ₹<%=
                                                            cartTotals.couponDiscount.toLocaleString() %>
                                                    </td>
                                                </tr>
                                                <% } %>

                                                    <tr class="cart_totals_row">
                                                        <td class="cart_totals_label">Delivery</td>
                                                        <td class="cart_totals_value">FREE</td>
                                                    </tr>

                                                    <tr class="cart_totals_row cart_grand_total_row">
                                                        <td class="cart_totals_label cart_grand_total_label">TOTAL</td>
                                                        <td class="cart_totals_value cart_grand_total_value">₹<%=
                                                                cartTotals.total.toLocaleString() %>
                                                        </td>
                                                    </tr>
                                </table>

                                <div class="cart_coupon_wrapper"
                                    style="margin-top: 15px; display: flex; justify-content: end;">
                                    <button onclick="toggleCoupons()" id="toggleBtn" class="open-coupon-btn">
                                        View Available Coupons
                                    </button>
                                </div>

                                <div class="cart_coupon_wrapper" style="margin-top: 15px;">
                                    <input type="text" class="cart_coupon_input" id="couponCode"
                                        placeholder="Enter Coupon Code" />
                                    <button onclick="applyCoupon()" class="cart_apply_coupon_btn">Apply Coupon</button>
                                </div>

                                <button class="cart_checkout_btn" onclick="submitForm()" style="margin-top: 20px;">
                                    Proceed to Checkout
                                </button>
                            </div>


                    </div>


            </div>




            <input type="hidden" value="<%= message %>" id="err">
            <%- include('../../views/partials/user/footer') %>
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
                <script>
                    function applyCoupon() {
                        const couponCode = document.getElementById('couponCode').value

                        fetch(`/applyCoupon?code=${couponCode}`, {
                            method: 'GET'
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: data.message || 'Coupon Applied',
                                        showConfirmButton: false,
                                        timer: 1500,
                                    }).then(() => {
                                        location.reload()
                                    })
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: data.message || 'Error while applying coupon',
                                        showConfirmButton: false,
                                        timer: 1500,
                                    })
                                }
                            })
                    }

                    function cancelCoupon(couponId) {
                        fetch(`/cancel-coupon?couponId=${couponId}`, {
                            method: 'GET',
                        })
                            .then(res => res.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: data.message || 'Coupon cancelled successfully!',
                                        showConfirmButton: false,
                                        timer: 1500
                                    }).then(() => location.reload());
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: data.message || 'Failed to cancel coupon.',
                                        showConfirmButton: true
                                    });
                                }
                            })
                            .catch(err => {
                                console.error(err);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Something went wrong!',
                                    text: err.message
                                });
                            });
                    }


                    function toggleCoupons() {
                        const modal = document.getElementById('couponModal');
                        modal.style.display = modal.style.display === 'flex' ? 'none' : 'flex';
                    }

                    function copyCoupon(code) {
                        navigator.clipboard.writeText(code).then(() => {
                            Swal.fire({
                                title: 'Copied!',
                                html: `<span style="font-size: 18px;">Coupon code <b style="color: #007bff;">"${code}"</b> copied to clipboard!</span>`,
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 1500,
                                background: '#f0f9ff',
                                color: '#333',
                                position: 'top-end',
                                toast: true
                            });

                        }).catch(err => {
                            Swal.fire({
                                title: 'Oops!',
                                text: 'Failed to copy coupon code. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#d33',
                                background: '#fff0f0',
                                color: '#5c0000',
                                position: 'top-end',
                                toast: true,
                                timer: 2000,
                                showConfirmButton: false
                            });


                        });
                    }

                    window.addEventListener('click', function (e) {
                        const modal = document.getElementById('couponModal');
                        if (e.target === modal) {
                            modal.style.display = 'none';
                        }
                    });

                    document.addEventListener('DOMContentLoaded', function () {


                        const message = document.getElementById('err').value;
                        if (message) {
                            Swal.fire(message);
                        }


                        const increaseButtons = document.querySelectorAll('.increase_btn');
                        const decreaseButtons = document.querySelectorAll('.decrease_btn');

                        increaseButtons.forEach(button => {
                            button.addEventListener('click', function () {
                                updateQuantity(this.dataset.productId, 'increase');
                            });
                        });

                        decreaseButtons.forEach(button => {
                            button.addEventListener('click', function () {
                                const quantityElement = this.parentElement.querySelector('.quantity_value');
                                const currentQuantity = parseInt(quantityElement.textContent);

                                if (currentQuantity > 1) {
                                    updateQuantity(this.dataset.productId, 'decrease');
                                } else {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Oops!',
                                        text: 'Quantity cannot be less than 1',
                                    });
                                }
                            });
                        });

                        function updateQuantity(productId, action) {
                            fetch('/update-cart-quantity', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    productId: productId,
                                    action: action
                                }),
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {

                                        updateCartUI(productId, data.newQuantity, data.newTotalPrice, data.cartTotal, data.offerAmount);

                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Cart updated',
                                            showConfirmButton: false,
                                            timer: 1500,
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error!',
                                            text: data.message,
                                        });
                                    }
                                })
                                .catch(error => {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops!',
                                        text: 'Failed to update cart. Please try again.',
                                    });
                                });
                        }


                        function updateCartUI(productId, newQuantity, newItemTotal, cartTotal, offer) {

                            const quantityBtn = document.querySelector(`.quantity_btn[data-product-id="${productId}"]`);
                            const productRow = quantityBtn.closest('.cart_item_row');

                            const quantityElement = productRow.querySelector('.quantity_value');
                            quantityElement.textContent = newQuantity;

                            const totalPriceCell = productRow.querySelector('.cart_total_cell');
                            totalPriceCell.textContent = `₹${parseFloat(newItemTotal).toLocaleString()}`;

                            document.getElementById('offerAmount').textContent = `₹${parseFloat(offer).toLocaleString()}`;

                            updateCartTotals(cartTotal);
                        }

                        function updateCartTotals(newTotal) {

                            const subtotalElement = document.querySelector('.cart_totals_table .cart_totals_row:nth-child(1) .cart_totals_value');
                            subtotalElement.textContent = `₹${parseFloat(newTotal).toLocaleString()}`;

                            const discountElement = document.querySelector('.cart_totals_table .cart_totals_row:nth-child(2) .cart_totals_value');
                            const discountText = discountElement.textContent;
                            const discountAmount = parseFloat(discountText.replace('₹', '').replace(/,/g, '')) || 0;

                            const grandTotalElement = document.querySelector('.cart_grand_total_value');
                            const finalTotal = Math.max(0, newTotal - discountAmount);
                            grandTotalElement.textContent = `₹${finalTotal.toLocaleString()}`;
                        }

                        const removeButtons = document.querySelectorAll('.cart_remove_btn');
                        removeButtons.forEach(button => {
                            button.addEventListener('click', function () {
                                const productRow = this.closest('.cart_item_row');
                                const productId = productRow.querySelector('.quantity_btn').dataset.productId;

                                removeFromCart(productId, productRow);
                            });
                        });

                        function removeFromCart(productId, productRow) {
                            Swal.fire({
                                title: 'Are you sure?',
                                text: 'You won\'t be able to undo this!',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#d33',
                                cancelButtonColor: '#3085d6',
                                confirmButtonText: 'Yes, remove it!',
                                cancelButtonText: 'Cancel'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    fetch('/remove-from-cart', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify({ productId: productId }),
                                    })
                                        .then(response => response.json())
                                        .then(data => {
                                            if (data.success) {
                                                productRow.remove();

                                                updateCartTotals(data.cartTotal);
                                                Swal.fire({
                                                    icon: 'success',
                                                    title: 'Item removed from cart',
                                                    showConfirmButton: false,
                                                    timer: 1500,
                                                });
                                            } else {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Error!',
                                                    text: data.message,
                                                });
                                            }
                                        })
                                        .catch(error => {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Oops!',
                                                text: 'Failed to remove item. Please try again.',
                                            });
                                        });
                                }
                            });
                        }

                        document.querySelector('.cart_checkout_btn').addEventListener('click', function (e) {
                            e.preventDefault();

                            validateStockBeforeCheckout();
                        });

                        function validateStockBeforeCheckout() {
                            const availableProducts = [];

                            document.querySelectorAll('.cart_item_row').forEach(row => {

                                if (row.querySelector('.btn-danger')) {
                                    return;
                                }

                                const quantityBtn = row.querySelector('.quantity_btn');
                                if (quantityBtn) {
                                    const productId = quantityBtn.dataset.productId;
                                    const quantityElement = row.querySelector('.quantity_value');
                                    const quantity = parseInt(quantityElement.textContent);
                                    const productName = row.querySelector('.cart_product_title').textContent.trim();

                                    availableProducts.push({
                                        productId,
                                        quantity,
                                        name: productName
                                    });
                                }
                            });

                            if (availableProducts.length === 0) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Empty Cart',
                                    text: 'Your cart is empty or contains only out-of-stock items.',
                                });
                                return;
                            }

                            fetch('/validate-cart-stock', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ products: availableProducts }),
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        checkOutOfStockItems();
                                    } else {
                                        // Some products have insufficient stock
                                        const insufficientItems = data.insufficientItems || [];

                                        if (insufficientItems.length > 0) {
                                            let message = 'The following items have insufficient stock:<br><br><ul style="text-align:left;">';

                                            insufficientItems.forEach(item => {
                                                message += `<li>${item.name}: You requested ${item.requestedQuantity}, but only ${item.availableStock} are available</li>`;
                                            });

                                            message += '</ul><br>Would you like to adjust these items to the maximum available quantity?';

                                            Swal.fire({
                                                title: 'Stock Changed',
                                                html: message,
                                                icon: 'warning',
                                                showCancelButton: true,
                                                confirmButtonColor: '#3085d6',
                                                cancelButtonColor: '#d33',
                                                confirmButtonText: 'Adjust Quantities',
                                                cancelButtonText: 'Cancel'
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    adjustQuantities(insufficientItems);
                                                }
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Error',
                                                text: data.message || 'Failed to validate stock. Please try again.'
                                            });
                                        }
                                    }
                                })
                                .catch(error => {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Failed to validate stock. Please try again.'
                                    });
                                });
                        }

                        function adjustQuantities(insufficientItems) {
                            const adjustPromises = insufficientItems.map(item => {
                                return fetch('/update-cart-item', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        productId: item.productId,
                                        quantity: item.availableStock
                                    }),
                                }).then(response => response.json());
                            });

                            Promise.all(adjustPromises)
                                .then(results => {
                                    const allSuccessful = results.every(result => result.success);
                                    if (allSuccessful) {
                                        window.location.reload();
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Cart Updated',
                                            text: 'Quantities have been adjusted to match available stock.',
                                            timer: 1500,
                                        })
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'Failed to adjust some quantities. Please try again.'
                                        });
                                    }
                                })
                                .catch(error => {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Failed to adjust quantities. Please try again.'
                                    });
                                });
                        }

                        function checkOutOfStockItems() {

                            const soldOutItems = document.querySelectorAll('.btn-danger');

                            if (soldOutItems.length > 0) {

                                const itemCount = soldOutItems.length;
                                const productNames = [];

                                soldOutItems.forEach(button => {
                                    const row = button.closest('.cart_item_row');
                                    const productName = row.querySelector('.cart_product_title').textContent.trim();
                                    productNames.push(productName);
                                });

                                Swal.fire({
                                    title: 'Cannot proceed to checkout',
                                    html: `You have ${itemCount} sold out or unlisted item(s) in your cart:<br><br>` +
                                        `<ul style="text-align:left;"><li>${productNames.join('</li><li>')}</li></ul><br>` +
                                        `Would you like to remove these items and continue to checkout?`,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: 'Remove & Continue',
                                    cancelButtonText: 'Cancel'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        // Remove all sold out/unlisted items
                                        const removePromises = [];

                                        soldOutItems.forEach(button => {
                                            const row = button.closest('.cart_item_row');
                                            const btnWithId = row.querySelector('.quantity_btn[data-product-id]');
                                            if (btnWithId) {
                                                const productId = btnWithId.dataset.productId;
                                                removePromises.push(
                                                    fetch('/remove-from-cart', {
                                                        method: 'POST',
                                                        headers: {
                                                            'Content-Type': 'application/json',
                                                        },
                                                        body: JSON.stringify({ productId: productId }),
                                                    }).then(response => response.json())
                                                );
                                            }
                                        });

                                        Promise.all(removePromises)
                                            .then(results => {
                                                // Once all items are removed, proceed to checkout
                                                submitForm();
                                            })
                                            .catch(error => {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Error',
                                                    text: 'Failed to remove some items. Please try again.'
                                                });
                                            });
                                    }
                                });
                            } else {
                                // No sold out items, proceed directly to checkout
                                submitForm();
                            }
                        }

                        function submitForm() {
                            // Submit the form to proceed to checkout
                            document.getElementById('submitBtn').click();
                        }
                    });
                </script>

</body>

</html>
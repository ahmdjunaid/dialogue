/* General Layout */
.main-container {
    margin-top: 3em;
    display: flex;
    min-height: calc(100vh - 300px);
    background-color: #f5f5f5;
}

/* Sidebar (unchanged) */
.sidebar {
    width: 200px;
    background-color: #f6f6f6;
    padding: 20px;
}

.sidebar h3 {
    margin-bottom: 20px;
    font-size: 18px;
    font-weight: 700;
}

.sidebar-menu {
    list-style: none;
}

.sidebar-item {
    margin-bottom: 15px;
    padding-left: 10px;
    border-left: 3px solid transparent;
}

.sidebar-item a {
    text-decoration: none;
    color: #333;
    font-size: 14px;
    display: block;
}

.sidebar-item a:hover {
    color: #192857;
}

.sidebar-item a.active {
    color: #192857;
    font-weight: 600;
}

.sidebar-item:hover {
    border-left-color: #192857;
}

/* Wrapper to center the order-details section */
.order-details-wrapper {
    flex: 1; /* Take up remaining space */
    display: flex;
    justify-content: center; /* Center horizontally */
    padding: 0 20px; /* Add some padding on the sides */
}

/* Order Details Section */
.order-details {
    width: 100%;
    max-width: 1200px; /* Wider max-width for the order details section */
}

/* Order Header */
.order-header {
    margin-bottom: 30px;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

.order-title {
    flex: 1;
}

.order-id {
    font-size: 14px;
    color: #333;
    margin-top: 10px;
}

.cancel-all-btn, .return-all-btn {
    background-color: #f0c14b;
    border: none;
    border-radius: 20px;
    color: #333;
    padding: 8px 16px;
    font-weight: 500;
    cursor: pointer;
    margin-top: 10px;
}

/* Timeline */
.order-timeline {
    display: flex;
    justify-content: space-between;
    margin: 30px 0;
    position: relative;
}

.timeline-line {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 2px;
    background-color: #ddd;
    z-index: -1;
}

.timeline-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.step-indicator {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    border: 2px solid #ddd;
    background-color: white;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.step-indicator.active {
    border-color: #000;
    background-color: #000;
}

.step-label {
    font-size: 12px;
    font-weight: 500;
    white-space: nowrap;
}

.products-container {
    margin-bottom: 20px;
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 15px;
}

.product {
    display: flex;
    padding: 2em;
    margin-bottom: 20px;
    padding-bottom: 20px;
    border-bottom: 1px solid #eee;
}


.product-image {
    width: 100px;
    height: 120px;
    object-fit: contain;
    margin-right: 20px;
}

.product-details {
    flex: 1;
}

.product-name {
    font-weight: 500;
    margin-bottom: 5px;
}

.product-specs {
    font-size: 12px;
    color: #666;
    margin-bottom: 3px;
}

.product-price {
    font-weight: 600;
    font-size: 14px;
    margin: 5px 0;
}

.product-action {
    position: absolute;
    right: 0;
    bottom: 20px;
}

.product:last-child .product-action {
    bottom: 0;
}

.product-cancel-btn, .product-return-btn {
    background-color: #f0c14b;
    border: none;
    border-radius: 15px;
    color: #333;
    padding: 5px 12px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    margin-bottom: 2em;
    margin-right: 2em;
}

.cancelled-product {
    opacity: 0.5;
}

.cancelled-badge {
    background-color: #ff4d4d;
    color: white;
    padding: 2px 8px;
    border-radius: 10px;
    font-size: 10px;
    margin-left: 10px;
    display: inline-block;
}

/* Order Status */
.order-status {
    margin: 20px 0;
}

.status-item {
    display: flex;
    margin-bottom: 5px;
}

.status-date {
    width: 110px;
    font-size: 13px;
    color: #666;
}

.status-time {
    width: 80px;
    font-size: 13px;
    color: #666;
}

.status-message {
    flex: 1;
    font-size: 13px;
    color: #333;
}

/* Help Link */
.help-link {
    text-align: center;
    font-size: 12px;
    margin-top: 10px;
    color: #0066c0;
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 400px;
}

.modal-title {
    font-weight: 500;
    margin-bottom: 15px;
}

.modal-message {
    margin-bottom: 20px;
}

.modal-actions {
    display: flex;
    justify-content: flex-end;
}

.modal-btn {
    padding: 8px 15px;
    margin-left: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.cancel-btn {
    background-color: #ddd;
}

.confirm-btn {
    background-color: #f0c14b;
}

textarea{
    overflow: auto;
    resize: vertical;
    width: 100%;
    border: 1px solid navajowhite;
}

.info{
    border: none;
    border-radius: 15px;
    color: #333;
    padding: 5px 12px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    margin-bottom: 2em;
    margin-right: 2em;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="stylesheet" href="/css/user/trackorder.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <%- include('../../views/partials/user/header') %>

        <div class="main-container">
            <%- include('../../views/partials/user/profileaside') %>

                <!-- Wrapper to center the order-details section -->
                <div class="order-details-wrapper">
                    <section class="order-details">
                        <div class="order-header">
                            <div class="order-title">
                                <h2 class="pt-3">ORDER DETAILS</h2>
                                <div class="order-id text-success"><b>â€¢ Order id #<%= order.orderId %></b>
                                </div>
                            </div>
                            <% if(order.status=='Pending' || order.status=='Processing' ){ %>
                                <button type="button" class="product-cancel-btn mt-3" 
                                        onclick="cancelEntireOrder('<%= order.orderId %>')">
                                    Cancel Order
                                </button>
                            <% } else if(order.status=='Delivered') { %>
                                <button type="button" class="product-cancel-btn mt-3" 
                                        onclick="returnEntireOrder('<%= order.orderId %>')">
                                    Return Order
                                </button>
                            <%}else{%>
                                <button type="button" class="btn btn-info mt-3" disabled>
                                    <%= order.status %>
                                </button>
                            <%}%>
                        </div>

                        <div class="order-timeline">
                            <div class="timeline-line"></div>

                            <div class="timeline-step">
                                <div id="pending" class="step-indicator"></div>
                                <div class="step-label">ORDER PLACED</div>
                            </div>

                            <div class="timeline-step">
                                <div id="processing" class="step-indicator"></div>
                                <div class="step-label">PROCESSING</div>
                            </div>

                            <div class="timeline-step">
                                <div id="shipped" class="step-indicator"></div>
                                <div class="step-label">SHIPPED</div>
                            </div>

                            <div class="timeline-step">
                                <div id="delivered" class="step-indicator"></div>
                                <div class="step-label">DELIVERED</div>
                            </div>

                            <%if( order.status == 'Cancelled' ){%>

                            <div class="timeline-step">
                                <div id="cancelled" class="step-indicator"></div>
                                <div class="step-label">CANCELLED</div>
                            </div>

                            <%}%>

                            <%if( order.status == 'Return Requested' ){%>
                            <div class="timeline-step">
                                <div id="returnrequested" class="step-indicator"></div>
                                <div class="step-label">RETURN REQUESTED</div>
                            </div>
                            <%}%>

                            <%if( order.status == 'Returned' ){%>
                            <div class="timeline-step">
                                <div id="returned" class="step-indicator"></div>
                                <div class="step-label">RETURNED</div>
                            </div>
                            <%}%>

                            <%if( order.status == 'Return Rejected' ){%>
                            <div class="timeline-step">
                                <div id="returnrejected" class="step-indicator"></div>
                                <div class="step-label">RETURN REJECTED</div>
                            </div>
                            <%}%>

                        </div>

                        <input type="hidden" id="orderStatus" value="<%= order.status %>">

                        <div class="products-container">
                            <% order.orderedItems.forEach(product=> { %>
                                <div class="product">
                                    <img src="../uploads/<%= product.imageurl[0] %>"
                                        alt="<%= product.product.productName %>" class="product-image">
                                    <div class="product-details">
                                        <div class="product-name">
                                            <%= product.product.productName %>
                                        </div>
                                        <div class="product-specs">Quantity: <%= product.quantity %>
                                        </div>
                                        <div class="product-specs">
                                            <%= product.product.description %>
                                        </div>
                                        <div class="product-specs">Mode of Payment: <%= order.paymentMethod %>
                                        </div>
                                        <div class="product-price">â‚¹<%= product.price.toLocaleString() %>
                                        </div>
                                    </div>
                                    <div class="product-action">
                                        <% if(product.status=='Pending' || product.status=='Processing' ){ %>
                                            <button type="button" class="product-cancel-btn" onclick="cancelItem('<%= order.orderId %>','<%= product.product._id %>')">
                                                Cancel Item
                                            </button>
                                            <%}else if(product.status=='Delivered' ){%>
                                                <button type="button" class="product-return-btn" onclick="returnItem('<%= order.orderId %>','<%= product.product._id %>')">
                                                    Return Item
                                                </button>
                                                <%}else{%>
                                                <button class="btn btn-info info" disabled>Item <%= product.status %></button>
                                                <%}%>
                                    </div>
                                </div>
                                <% }) %>
                        </div>
                    </section>
                </div>
        </div>

        <%- include('../../views/partials/user/footer') %>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    let orderStatus = document.getElementById('orderStatus').value;
            
                    const orderSteps = [
                        "Pending",
                        "Processing",
                        "Shipped",
                        "Delivered",
                        "Cancelled",
                        "Return Requested",
                        "Return Rejected",
                        "Returned"
                    ];
            
                    function activateSteps(status) {
                        let statusIndex = orderSteps.indexOf(status);
            
                        if (statusIndex !== -1) {
                            for (let i = 0; i <= statusIndex; i++) {
                                let stepId = orderSteps[i].toLowerCase().replace(/\s+/g, "");
                                let stepElement = document.getElementById(stepId);
                                if (stepElement) {
                                    stepElement.classList.add("active");
                                }
                            }
                        }
                    }
            
                    activateSteps(orderStatus);
                });
            
                function cancelEntireOrder(orderId) {
                    Swal.fire({
                        title: 'Cancel Entire Order',
                        text: 'Please provide a reason for cancellation:',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Cancel Order',
                        showLoaderOnConfirm: true,
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Please enter a cancellation reason');
                                return false;
                            }
            
                            return fetch('/cancelorder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    reason: reason
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.status === 'success') {
                                    return data;
                                } else {
                                    throw new Error(data.message);
                                }
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Error: ${error.message}`);
                            });
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Cancelled',
                                text: result.value.message
                            }).then(() => {
                                location.reload();  
                            });
                        }
                    });
                }

                function returnEntireOrder(orderId) {
                    Swal.fire({
                        title: 'Return Entire Order',
                        text: 'Please provide a reason for return:',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Cancel Order',
                        showLoaderOnConfirm: true,
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Please enter a return reason');
                                return false;
                            }
            
                            return fetch('/returnorder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    reason: reason
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.status === 'success') {
                                    return data;
                                } else {
                                    throw new Error(data.message);
                                }
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Error: ${error.message}`);
                            });
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Return requested',
                                text: result.value.message
                            }).then(() => {
                                location.reload();
                            });
                        }
                    });
                }
            
                function cancelItem(orderId, productId) {
                    Swal.fire({
                        title: 'Cancel Product',
                        text: 'Please provide a reason for cancellation:',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Cancel Item',
                        showLoaderOnConfirm: true,
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Please enter a cancellation reason');
                                return false;
                            }
            
                            return fetch('/cancelitem', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    productId: productId,
                                    reason: reason
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.status === 'success') {
                                    return data;
                                } else {
                                    throw new Error(data.message);
                                }
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Error: ${error.message}`);
                            });
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Item Cancelled',
                                text: result.value.message
                            }).then(() => {
                                location.reload();
                            });
                        }
                    });
                }
            
                function returnItem(orderId, productId) {
                    Swal.fire({
                        title: 'Return Product',
                        text: 'Please provide a reason for return:',
                        input: 'text',
                        inputAttributes: {
                            autocapitalize: 'off'
                        },
                        showCancelButton: true,
                        confirmButtonText: 'Request Return',
                        showLoaderOnConfirm: true,
                        preConfirm: (reason) => {
                            if (!reason) {
                                Swal.showValidationMessage('Please enter a return reason');
                                return false;
                            }
            
                            return fetch('/returnorder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    orderId: orderId,
                                    productId: productId,
                                    reason: reason
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.status === 'success') {
                                    return data;
                                } else {
                                    throw new Error(data.message);
                                }
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Error: ${error.message}`);
                            });
                        },
                        allowOutsideClick: () => !Swal.isLoading()
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Return Requested',
                                text: result.value.message
                            }).then(() => {
                                location.reload();
                            });
                        }
                    });
                }
            </script>
</body>

</html>